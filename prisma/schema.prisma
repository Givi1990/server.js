generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  email             String    @unique
  password          String
  isAdmin           Boolean   @default(false)
  isBlocked         Boolean   @default(false)
  salesforce        Boolean   @default(false) 
  registrationDate  DateTime  @default(now())

  surveys           Survey[]    
  answers           Answer[]  

  @@index([username]) 
}


model Survey {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  theme       String
  imageUrl    String?
  tags        String[]
  isPublic    Boolean  @default(false)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  questions   Question[] 
  completed   Boolean? @default(false) 
  answers     Answer[] 
}



model Question {
  id            Int       @id @default(autoincrement())
  questionText  String
  questionType  String    
  options       Option[]  
  surveyId      Int
  survey        Survey     @relation(fields: [surveyId], references: [id], onDelete: Cascade) 
  answers       Answer[] 

  @@index([surveyId]) 
}



model Option {
  id          Int       @id @default(autoincrement())
  option      String    
  questionId  Int
  question    Question   @relation(fields: [questionId], references: [id]) 

  @@index([questionId]) 
}

model Answer {
  id                Int       @id @default(autoincrement())
  questionId       Int
  answerText       String?   
  numericAnswer    Int?      
  booleanAnswer    Boolean?   
  userId           Int       
  surveyId         Int       
  createdAt        DateTime  @default(now()) 
  isMultipleChoice  Boolean?  @default(false) 

  question         Question   @relation(fields: [questionId], references: [id], onDelete: Cascade) 
  user             User       @relation(fields: [userId], references: [id]) 
  survey           Survey     @relation(fields: [surveyId], references: [id], onDelete: Cascade) 

  multipleChoiceAnswers MultipleChoiceAnswer[] 

  @@index([questionId]) 
  @@index([surveyId]) 
}


model MultipleChoiceAnswer {
  id            Int     @id @default(autoincrement())
  answerId     Int
  option       String   

  answer       Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@index([answerId])
}
